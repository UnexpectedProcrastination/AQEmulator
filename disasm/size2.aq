0005: INVALID OPCODE; (tictactoe$board)

000e: INVALID OPCODE; (tictactoe$indices)

0074: set c, 0000; (tictactoe$CheckWinner)

0075: set a, c
0076: add a, 0005
0078: set a, &a
0079: comp a, 0020
007b: jump:z 0097

007d: set a, c
007e: add a, 0005
0080: set b, &a
0081: set a, c
0082: add a, 0006
0084: set a, &a
0085: comp a, b
0086: jump:nz 0097

0088: set a, c
0089: add a, 0006
008b: set b, &a
008c: set a, c
008d: add a, 0007
008f: set a, &a
0090: comp a, b
0091: jump:nz 0097

0093: add c, 0005
0095: set a, &c
0096: ret

0097: add c, 0003
0099: comp c, 0009
009b: jump:b 0075

009d: set c, 0000

009e: set a, c
009f: add a, 0005
00a1: set a, &a
00a2: comp a, 0020
00a4: jump:z 00c0

00a6: set a, c
00a7: add a, 0005
00a9: set b, &a
00aa: set a, c
00ab: add a, 0008
00ad: set a, &a
00ae: comp a, b
00af: jump:nz 00c0

00b1: set a, c
00b2: add a, 0008
00b4: set b, &a
00b5: set a, c
00b6: add a, 000b
00b8: set a, &a
00b9: comp a, b
00ba: jump:nz 00c0

00bc: add c, 0005
00be: set a, &c
00bf: ret

00c0: inc c
00c1: comp c, 0003
00c3: jump:b 009e

00c5: set a, &0009
00c7: comp a, 0020
00c9: jump:z 00ea

00cb: set b, &tictactoe$board(0005)
00cd: set a, &0009
00cf: comp a, b
00d0: jump:nz 00d9

00d2: set b, &0009
00d4: set a, &000d
00d6: comp a, b
00d7: jump:z 00e7

00d9: set b, &0007
00db: set a, &0009
00dd: comp a, b
00de: jump:nz 00ea

00e0: set b, &0009
00e2: set a, &000b
00e4: comp a, b
00e5: jump:nz 00ea

00e7: set a, &0009
00e9: ret

00ea: set a, 0000
00eb: ret

00ec: set b, 0000; (tictactoe$CheckDraw)

00ed: set a, b
00ee: add a, 0005
00f0: set a, &a
00f1: comp a, 0020
00f3: jump:nz 00f7

00f5: set a, 0000
00f6: ret

00f7: inc b
00f8: comp b, 0009
00fa: jump:b 00ed

00fc: set a, 0001
00fd: ret

00fe: INVALID OPCODE; (Memory$heap)

00ff: set e, 04e1; (Memory$_Init)
0101: set &Memory$heap(00fe), e
0103: set b, &Memory$heap(00fe)
0105: set a, 04e2
0107: neg a
0108: set &b, a
0109: set a, &Memory$heap(00fe)
010b: inc a
010c: set &a, 0000
010d: ret

010e: add c, a; (MemoryCopy)
010f: comp a, c
0110: ret:ae

0111: set d, &b
0112: set &a, d
0113: inc b
0114: inc a
0115: comp a, c
0116: jump:b 0111

0118: ret

0119: add b, a; (MemorySet)
011a: comp a, b
011b: ret:ae

011c: set &a, c
011d: inc a
011e: comp a, b
011f: jump:b 011c

0121: ret

0122: add b, a; (MemoryZero)
0123: comp a, b
0124: ret:ae

0125: set &a, 0000
0126: inc a
0127: comp a, b
0128: jump:b 0125

012a: ret

012b: set d, a; (MemoryCompare)
012c: add c, a
012d: comp a, c
012e: jump:ae 0140

0130: set e, &a
0131: set &(fp+0001), e
0132: set e, &b
0133: set &fp, e
0134: set e, &fp
0135: push a
0136: set a, &(fp+0001)
0137: comp e, a
0138: pop a
0139: jump:nz 0140

013b: inc a
013c: inc b
013d: comp a, c
013e: jump:b 0130

0140: sub d, a
0141: set a, d
0142: ret

0143: test b, b; (Memory$AllocBlock)
0144: jump:nz 0148

0146: set a, 0000
0147: ret

0148: inc a
0149: comp a, c
014a: jump:ae 015b

014c: add a, b
014d: set &b, c
014e: sub c, a
014f: add c, b
0150: set &a, c
0151: set e, a
0152: inc e
0153: set &fp, e
0154: set c, b
0155: inc c
0156: set c, &c
0157: set e, &fp
0158: set &e, c
0159: jump 015e

015b: set a, b
015c: inc a
015d: set a, &a

015e: test d, d
015f: jump:z 0165

0161: inc d
0162: set &d, a
0163: jump 0167

0165: set &Memory$heap(00fe), a

0167: inc b
0168: set a, b
0169: ret

016a: set b, &Memory$heap(00fe); (FastAlloc)
016c: test b, b
016d: jump:z 0181

016f: set c, 0000
0170: set d, 0000
0171: test b, b
0172: jump:z 017e

0174: set c, &b
0175: comp a, c
0176: jump:be 017e

0178: set d, b
0179: inc b
017a: set b, &b
017b: test b, b
017c: jump:nz 0174

017e: call Memory$AllocBlock(0143)
0180: ret

0181: set a, 0000
0182: ret

0183: set d, &Memory$heap(00fe); (MemoryAlloc)
0185: test d, d
0186: jump:z 01aa

0188: set e, 0000
0189: set &(fp+0002), e
018b: set c, FFFF
018c: set e, 0000
018d: set &(fp+0001), e
018e: set &fp, 0000
018f: test d, d
0190: jump:z 01a4

0192: set b, &d
0193: comp a, b
0194: jump:a 019e

0196: comp b, c
0197: jump:ae 019e

0199: set e, &(fp+0001)
019a: set &fp, e
019b: set &(fp+0002), d
019d: set c, b

019e: set &(fp+0001), d
019f: inc d
01a0: set d, &d
01a1: test d, d
01a2: jump:nz 0192

01a4: set b, &(fp+0002)
01a6: set d, &fp
01a7: call Memory$AllocBlock(0143)
01a9: ret

01aa: set a, 0000
01ab: ret

01ac: push a; (ZeroMemoryAlloc)
01ad: call MemoryAlloc(0183)
01af: set b, a
01b0: pop a
01b1: push b
01b2: swap a, b
01b3: call MemoryZero(0122)
01b5: pop b
01b6: set a, b
01b7: ret

01b8: dec a; (MemoryDeAlloc)
01b9: set d, &Memory$heap(00fe)
01bb: set b, 0000
01bc: comp a, d
01bd: jump:be 01c5

01bf: set b, d
01c0: inc d
01c1: set d, &d
01c2: comp a, d
01c3: jump:a 01bf

01c5: test b, b
01c6: jump:z 01cc

01c8: inc b
01c9: set &b, a
01ca: jump 01ce

01cc: set &Memory$heap(00fe), a

01ce: set b, a
01cf: add b, 0000
01d0: set b, &b
01d1: add b, a
01d2: comp b, d
01d3: jump:nz 01e6

01d5: set e, a
01d6: add e, 0000
01d7: set &fp, e
01d8: set c, &fp
01d9: set &c, c
01da: set b, d
01db: add b, 0000
01dc: set b, &b
01dd: inc b
01de: add c, b
01df: set e, &fp
01e0: set &e, c
01e1: inc a
01e2: inc d
01e3: set b, &d
01e4: set &a, b
01e5: ret

01e6: inc a
01e7: set &a, d
01e8: ret

01e9: set d, a; (StringLength)
01ea: set b, &a
01eb: test b, b
01ec: jump:z 01f3

01ee: inc a
01ef: set c, &a
01f0: test c, c
01f1: jump:nz 01ee

01f3: sub a, d
01f4: ret

01f5: set c, a; (StringEqual)
01f6: inc a
01f7: set d, &c
01f8: set c, b
01f9: inc b
01fa: set c, &c
01fb: set &fp, d
01fc: test d, d
01fd: jump:nz 0200

01ff: set &fp, c

0200: set e, &fp
0201: jump:z 0216

0203: comp c, d
0204: jump:z 0208

0206: set a, 0000
0207: ret

0208: set c, a
0209: inc a
020a: set d, &c
020b: set c, b
020c: inc b
020d: set c, &c
020e: set &fp, d
020f: test d, d
0210: jump:nz 0213

0212: set &fp, c

0213: set e, &fp
0214: jump:nz 0203

0216: set a, 0001
0217: ret

0218: set d, a; (StringCopy)
0219: inc a
021a: set c, b
021b: inc b
021c: set c, &c
021d: set &d, c
021e: test c, c
021f: ret:z

0220: set d, a
0221: inc a
0222: set c, b
0223: inc b
0224: set c, &c
0225: set &d, c
0226: test c, c
0227: jump:nz 0220

0229: ret

022a: set c, &a; (StringAppend)
022b: test c, c
022c: jump:z 0233

022e: inc a
022f: set c, &a
0230: test c, c
0231: jump:nz 022e

0233: call StringCopy(0218)
0235: ret

0236: set d, a; (StringFirst)
0237: set c, &a
0238: test c, c
0239: jump:z 0246

023b: comp b, c
023c: jump:nz 0241

023e: sub d, a
023f: set a, d
0240: ret

0241: inc a
0242: set c, &a
0243: test c, c
0244: jump:nz 023b

0246: set a, FFFF
0247: ret

0248: set &fp, a; (StringLast)
0249: set d, FFFF
024a: set c, &a
024b: test c, c
024c: jump:z 0258

024e: comp b, c
024f: jump:nz 0253

0251: set d, &fp
0252: sub d, a

0253: inc a
0254: set c, &a
0255: test c, c
0256: jump:nz 024e

0258: set a, d
0259: ret

025a: set a, fff9; (Test$_Main)
025c: ret

025d: INVALID OPCODE; (Test$scopeVar)

025e: push a; (Test$ShuffleTest)
025f: push b
0260: push c
0261: push d
0262: call Test$ShuffleTest(025e)
0264: fset a, &(sp-0004)
0266: set b, a
0267: set c, a
0268: set d, a
0269: call Test$ShuffleTest(025e)
026b: fset a, &(sp-0004)
026d: fset d, &(sp-0001)
026e: set b, d
026f: set c, d
0270: set d, a
0271: call Test$ShuffleTest(025e)
0273: pop d
0274: fset a, &(sp-0003)
0276: set &(sp-0003), d
0278: fset b, &(sp-0002)
027a: fset d, &(sp-0003)
027c: swap a, b
027d: set c, d
027e: swap d, b
027f: call Test$ShuffleTest(025e)
0281: pop c
0282: fset b, &(sp-0001)
0283: set &(sp-0001), c
0284: pop c
0285: pop d
0286: set a, b
0287: set b, c
0288: set c, FFFF
0289: call Test$ShuffleTest(025e)
028b: ret

028c: set a, 0011; (Test$ScopeTest)
028e: call ZeroMemoryAlloc(01ac)
0290: set a, &Test$scopeVar(025d)
0292: ret

0293: ret; (Test$derefTest)

0294: set c, 0000; (Test$Sum)
0295: set b, 0000
0296: chck a
0297: jump:le 029e

0299: add c, b
029a: inc b
029b: comp a, b
029c: jump:g 0299

029e: set a, c
029f: ret

02a0: out a; (PrintChar)
02a1: out 0000
02a2: ret

02a3: out a; (WriteOutput)
02a4: ret

02a5: in a; (ReadInput)
02a6: ret

02a7: set c, ip; (ReadChar)
02a8: in a
02a9: jump:z c
02aa: set c, ip
02ab: in b
02ac: jump:nz c
02ad: ret

02ae: set b, 0008; (Clear)
02b0: set c, ip
02b1: out b
02b2: out 0000
02b3: dec a
02b4: jump:nz c
02b5: ret

02b6: add b, a; (ReadLine)
02b7: dec b
02b8: comp a, b
02b9: jump:ae 02d0

02bb: push a
02bc: push b
02bd: call ReadChar(02a7)
02bf: set c, a
02c0: push c
02c1: set a, c
02c2: call PrintChar(02a0)
02c4: pop c
02c5: pop b
02c6: pop a
02c7: comp c, 000a
02c9: jump:z 02d0

02cb: set &a, c
02cc: inc a
02cd: comp a, b
02ce: jump:b 02bb

02d0: set &a, 0000
02d1: ret

02d2: set c, &a; (PrintString)
02d3: test c, c
02d4: ret:z

02d5: push a
02d6: set a, c
02d7: call PrintChar(02a0)
02d9: pop a
02da: inc a
02db: set c, &a
02dc: test c, c
02dd: jump:nz 02d5

02df: ret

02e0: set b, 0000; (tictactoe$PrintBoard)

02e1: set a, b
02e2: inc b
02e3: add a, 0005
02e5: set a, &a
02e6: push b
02e7: call PrintChar(02a0)
02e9: set a, 007c
02eb: call PrintChar(02a0)
02ed: pop b
02ee: set a, b
02ef: inc b
02f0: add a, 0005
02f2: set a, &a
02f3: push b
02f4: call PrintChar(02a0)
02f6: set a, 007c
02f8: call PrintChar(02a0)
02fa: pop b
02fb: set a, b
02fc: inc b
02fd: add a, 0005
02ff: set a, &a
0300: push b
0301: call PrintChar(02a0)
0303: pop b
0304: comp b, 0009
0306: jump:z 0310

0308: push b
0309: set a, 006c
030b: call PrintString(02d2)
030d: pop b
030e: jump 0315

0310: push b
0311: set a, 000a
0313: call PrintChar(02a0)

0315: pop b
0316: comp b, 0009
0318: jump:b 02e1

031a: ret

031b: set b, 0058; (Main)
031d: push b
031e: call tictactoe$PrintBoard(02e0)
0320: set a, 0058
0322: call PrintChar(02a0)
0324: set a, 0017
0326: call PrintString(02d2)

0328: call ReadChar(02a7)
032a: pop b
032b: comp a, 0031
032d: jump:b 037e

032f: comp a, 0039
0331: jump:a 037e

0333: sub a, 0031
0335: add a, 000e
0337: set c, &a
0338: set a, c
0339: add a, 0005
033b: set a, &a
033c: comp a, 0020
033e: jump:nz 0328

0340: add c, 0005
0342: set &c, b
0343: push b
0344: set a, 0040
0346: call Clear(02ae)
0348: call tictactoe$PrintBoard(02e0)
034a: call tictactoe$CheckWinner(0074)
034c: pop b
034d: test a, a
034e: jump:z 035a

0350: push b
0351: call PrintChar(02a0)
0353: set a, 0020
0355: call PrintString(02d2)
0357: pop b
0358: jump 0328

035a: push b
035b: call tictactoe$CheckDraw(00ec)
035d: pop b
035e: test a, a
035f: jump:z 0369

0361: push b
0362: set a, 003e
0364: call PrintString(02d2)
0366: pop b
0367: jump 0328

0369: comp b, 0058
036b: jump:nz 0371

036d: set b, 004f
036f: jump 0373

0371: set b, 0058

0373: push b
0374: set a, b
0375: call PrintChar(02a0)
0377: set a, 005a
0379: call PrintString(02d2)
037b: pop b
037c: jump 0328

037e: comp a, 0052
0380: jump:nz 03a1

0382: set b, 0000

0383: set a, b
0384: add a, 0005
0386: set &a, 0020
0388: inc b
0389: comp b, 0009
038b: jump:l 0383

038d: set b, 0058
038f: push b
0390: set a, 0040
0392: call Clear(02ae)
0394: call tictactoe$PrintBoard(02e0)
0396: set a, 0058
0398: call PrintChar(02a0)
039a: set a, 0063
039c: call PrintString(02d2)
039e: pop b
039f: jump 0328

03a1: comp a, 0045
03a3: ret:z

03a4: jump 0328

03a7: set d, 0000; (Multiply)
03a8: test a, a
03a9: jump:z 03b6

03ab: set c, a
03ac: and c, 0001
03ad: test c, c
03ae: jump:z 03b1

03b0: add d, b

03b1: shl b, 0001
03b2: shr a, 0001
03b3: test a, a
03b4: jump:nz 03ab

03b6: set a, d
03b7: ret

03b8: comp a, b; (SignedMin)
03b9: jump:ge 03bc

03bb: ret

03bc: set a, b
03bd: ret

03be: comp a, b; (UnsignedMin)
03bf: jump:ae 03c2

03c1: ret

03c2: set a, b
03c3: ret

03c4: comp a, b; (SignedMax)
03c5: jump:le 03c8

03c7: ret

03c8: set a, b
03c9: ret

03ca: comp a, b; (UnsignedMax)
03cb: jump:be 03ce

03cd: ret

03ce: set a, b
03cf: ret

03d0: comp a, 0001; (Sign)
03d1: jump:ge 03d5

03d3: shr a, FFFF
03d4: ret

03d5: set a, 0001
03d6: ret

03d7: chck a; (Abs)
03d8: ret:ge

03d9: neg a
03da: ret

04e1: INVALID OPCODE; (_binaryEnd)

